{"version":3,"sources":["App.jsx","index.js"],"names":["App","inputData","useRef","useState","inputTodos","setInputTodos","listTodos","setListTodos","todoId","setTodoId","editValue","setEditValue","useEffect","todoJSON","localStorage","getItem","loadTodos","JSON","parse","stringify","setItem","className","onSubmit","e","preventDefault","todos","id","Date","getTime","text","current","focus","onFormSubmit","type","onChange","target","value","onInputChange","ref","required","map","list","onEditValueChange","onClick","todo","filter","item","getTodoId","deleteTodo","updateTodo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAmJeA,EAhJH,WAGV,IAAMC,EAAYC,iBAAO,MAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEA,EAA4BJ,mBAAS,MAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAGAC,qBAAU,WACR,IAAMC,EAAWC,aAAaC,QAAQ,SAChCC,EAAYC,KAAKC,MAAML,GAE7BG,GAAaT,EAAaS,KACzB,IAEHJ,qBAAU,WACR,IAAMC,EAAWI,KAAKE,UAAUb,GAChCQ,aAAaM,QAAQ,QAASP,KAC7B,CAACP,IA8DJ,OACE,sBAAKe,UAAU,iBAAf,UACE,oBAAIA,UAAU,QAAd,8CACA,qBAAKA,UAAU,iBAAf,SACE,uBAAMC,SAAU,SAACC,GAAD,OAxDD,SAACA,GACpBA,EAAEC,iBAEF,IAAMC,EAAQ,CACZC,IAAI,IAAIC,MAAOC,UACfC,KAAMzB,GAGRG,EAAa,GAAD,mBAAKD,GAAL,CAAgBmB,KAE5BpB,EAAc,IACdJ,EAAU6B,QAAQC,QA6CSC,CAAaT,IAAIF,UAAU,OAAlD,UACE,uBAAOA,UAAU,aAAaY,KAAK,OAAOC,SAAU,SAACX,GAAD,OA/DtC,SAACA,GACrBlB,EAAckB,EAAEY,OAAOC,OA8D0CC,CAAcd,IAAIa,MAAOhC,EAAYkC,IAAKrC,EAAWsC,UAAQ,IACxH,wBAAQlB,UAAU,eAAeY,KAAK,SAAtC,2BAIJ,wBAAOZ,UAAU,QAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,eAAd,mBACA,oBAAIA,UAAU,mBAAd,8BAIFf,EAAUkC,KAAI,SAAAC,GACZ,OACE,gCACE,+BAEIjC,IAAWiC,EAAKf,GAEd,6BACE,uBAAOL,UAAU,aAAaY,KAAK,OAAOC,SAAU,SAACX,GAAD,OA9BhD,SAACA,GACzBZ,EAAaY,EAAEY,OAAOC,OA6ByDM,CAAkBnB,IAAIa,MAAO1B,MAG1F,0CAGI+B,EAAKZ,QAKXrB,IAAWiC,EAAKf,GAEd,+BACE,wBAAQL,UAAU,gBAAgBsB,QAAS,kBArE/C,SAACjB,GACjBjB,EAAUiB,GAEV,IAAMkB,EAAOtC,EAAUuC,QAAO,SAAAC,GAAI,OAAIA,EAAKpB,KAAOA,KAClDf,EAAaiC,EAAK,GAAGf,MAiEgDkB,CAAUN,EAAKf,KAAhE,kBACA,wBAAQL,UAAU,kBAAkBsB,QAAS,kBA7EhD,SAACjB,GAClB,IAAMD,EAAQ,YAAInB,GAAWuC,QAAO,SAAAD,GAAI,OAAIA,EAAKlB,KAAOA,KACxDnB,EAAakB,GA2E0DuB,CAAWP,EAAKf,KAAnE,uBAGF,+BACE,wBAAQL,UAAU,kBAAkBsB,QAAS,kBAjEhD,SAACjB,GAElB,IAAMD,EAAQ,YAAInB,GAAWkC,KAAI,SAACI,GAIhC,OAHIA,EAAKlB,KAAOA,IACdkB,EAAKf,KAAOnB,GAEPkC,KAGTrC,EAAakB,GACbhB,EAAU,MACVE,EAAa,IAsD0DsC,CAAWR,EAAKf,KAAnE,oBACA,wBAAQL,UAAU,kBAAkBsB,QAAS,kBAAMlC,EAAU,OAA7D,2BA1BEgC,EAAKf,cCtG/BwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e6751b2f.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport './App.css';\n\nconst App = () => {\n\n  // for focusing on add todo input\n  const inputData = useRef(null)\n\n  const [inputTodos, setInputTodos] = useState('')\n  const [listTodos, setListTodos] = useState([])\n\n  const [todoId, setTodoId] = useState(null)\n  const [editValue, setEditValue] = useState('')\n\n\n  useEffect(() => {\n    const todoJSON = localStorage.getItem('todos')\n    const loadTodos = JSON.parse(todoJSON)\n\n    loadTodos && setListTodos(loadTodos)\n  }, [])\n\n  useEffect(() => {\n    const todoJSON = JSON.stringify(listTodos)\n    localStorage.setItem('todos', todoJSON)\n  }, [listTodos])\n\n  // ============================== //\n\n  const onInputChange = (e) => {\n    setInputTodos(e.target.value)\n  }\n\n  // ============================== //\n\n  const onFormSubmit = (e) => {\n    e.preventDefault()\n\n    const todos = {\n      id: new Date().getTime(),\n      text: inputTodos\n    }\n\n    setListTodos([...listTodos, todos])\n\n    setInputTodos('')\n    inputData.current.focus()\n  }\n\n  // ============================== //\n\n  const deleteTodo = (id) => {\n    const todos = [...listTodos].filter(todo => todo.id !== id)\n    setListTodos(todos)\n  }\n\n  // ============================== //\n\n  const getTodoId = (id) => {\n    setTodoId(id)\n\n    const todo = listTodos.filter(item => item.id === id)\n    setEditValue(todo[0].text)\n  }\n\n  // ============================== //\n\n  const updateTodo = (id) => {\n\n    const todos = [...listTodos].map((todo) => {\n      if (todo.id === id) {\n        todo.text = editValue\n      }\n      return todo\n    })\n\n    setListTodos(todos)\n    setTodoId(null)\n    setEditValue('')\n  }\n\n  // ============================== //\n\n  const onEditValueChange = (e) => {\n    setEditValue(e.target.value)\n  }\n\n  return (\n    <div className=\"todo-container\">\n      <h1 className=\"title\">The Amazing Todo List App âœŽ</h1>\n      <div className=\"form-container\">\n        <form onSubmit={(e) => onFormSubmit(e)} className=\"form\">\n          <input className=\"todo-input\" type=\"text\" onChange={(e) => onInputChange(e)} value={inputTodos} ref={inputData} required />\n          <button className=\"add-todo-btn\" type=\"submit\">Add Todo</button>\n        </form>\n      </div>\n\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th className=\"todo-heading\">Todos</th>\n            <th className=\"todo-sub-heading\">What to do?</th>\n          </tr>\n        </thead>\n        {\n          listTodos.map(list => {\n            return (\n              <tbody key={list.id}>\n                <tr>\n                  {\n                    todoId === list.id\n                      ?\n                      <td>\n                        <input className=\"edit-input\" type=\"text\" onChange={(e) => onEditValueChange(e)} value={editValue} />\n                      </td>\n                      :\n                      <td >\n                        &nbsp;&nbsp;\n                        {\n                          list.text\n                        }\n                      </td>\n                  }\n                  {\n                    todoId !== list.id\n                      ?\n                      <td>\n                        <button className=\"edit-todo-btn\" onClick={() => getTodoId(list.id)}>Edit</button>\n                        <button className=\"delete-todo-btn\" onClick={() => deleteTodo(list.id)}>Delete</button>\n                      </td>\n                      :\n                      <td>\n                        <button className=\"update-todo-btn\" onClick={() => updateTodo(list.id)}>Update</button>\n                        <button className=\"cancel-todo-btn\" onClick={() => setTodoId(null)}>Cancel</button>\n                      </td>\n                  }\n                </tr>\n              </tbody>\n            )\n          })\n        }\n      </table>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}